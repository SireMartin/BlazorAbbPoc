@page "/EMax/{*ItemId}"

@using System.Timers;
@using BlazorAbbPoc.Shared.Messages

@inject IHttpClientFactory ClientFactory

@implements IDisposable

<div class="container">
    <div class="row">
        <AbbBreadCrumb PageRoute="@ItemId" />
    </div>
    <div class="row justify-content-center mt-4">
        <div class="col-auto">
            <h3>@ItemId.Split('/').Last()</h3>
        </div>
    </div>
    @if(currentPlcData is not null && currentPlcData.l1nV is not null)
    {
        <div class="row my-4 justify-content-center">
            <div class="col-1">
                <strong>Load</strong>
            </div>
            <div class="col-4">
                @{
                    double ProgressBarValue = ((double)(currentPlcData.l1A.Value + currentPlcData.l2A.Value + currentPlcData.l3A.Value)) / 3d;
                }
                <TelerikProgressBar Max="@currentPlcData.protA_L_I1.Value" Value="@ProgressBarValue">
                    <ProgressBarLabel Visible="true" Position="@ProgressBarLabelPosition.Center">
                        <Template>
                            <div>
                                @($"{(context.Value / currentPlcData.protA_L_I1.Value * 100):F2} %")
                            </div>
                        </Template>
                    </ProgressBarLabel>
                </TelerikProgressBar>
            </div>
        </div>
        <div class="row my-4">
            @*phase voltage*@
            <div class="col col-3-lg">
                <AbbEmaxGauge MinValue="0" MaxValue="500" GaugeValue="@(currentPlcData.l1nV.Value / 10)" PointerColor="Red" Unit="V" />
            </div>
            <div class="col col-3-lg">
                <AbbEmaxGauge MinValue="0" MaxValue="500" GaugeValue="@(currentPlcData.l2nV.Value / 10)" PointerColor="Red" Unit="V" />
            </div>
            <div class="col col-3-lg">
                <AbbEmaxGauge MinValue="0" MaxValue="500" GaugeValue="@(currentPlcData.l3nV.Value / 10)" PointerColor="Red" Unit="V" />
            </div>
            <div class="col col-3-lg">
                <div class="d-flex flex-column justify-content-evenly h-100">
                    <div class="d-flex justify-content-around">
                        <div>
                            <strong>Voltage L1-L2</strong>
                        </div>
                        <div>
                            @currentPlcData.l1l2V
                        </div>
                    </div>
                    <div class="d-flex justify-content-around">
                        <div>
                            <strong>Voltage L2-L3</strong>
                        </div>
                        <div>
                            @currentPlcData.l2l3V
                        </div>
                    </div>
                    <div class="d-flex justify-content-around">
                        <div>
                            <strong>Voltage L3-L1</strong>
                        </div>
                        <div>
                            @currentPlcData.l3l1V
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row my-4">
            @*current*@
            <div class="col col-3-lg">
                <AbbEmaxGauge MinValue="0" MaxValue="500" GaugeValue="@(currentPlcData.l1A.Value / 10)" PointerColor="Red" Unit="A" />
            </div>
            <div class="col col-3-lg">
                <AbbEmaxGauge MinValue="0" MaxValue="500" GaugeValue="@(currentPlcData.l2A.Value / 10)" PointerColor="Red" Unit="A" />
            </div>
            <div class="col col-3-lg">
                <AbbEmaxGauge MinValue="0" MaxValue="500" GaugeValue="@(currentPlcData.l3A.Value / 10)" PointerColor="Red" Unit="A" />
            </div>
            <div class="col col-3-lg">
                <div class="d-flex flex-column justify-content-evenly h-100">
                    <div class="d-flex justify-content-around">
                        <div>
                            <strong>Frequency</strong>
                        </div>
                        <div>
                            @(currentPlcData.frq / 1000)
                        </div>
                    </div>
                    <div class="d-flex justify-content-around">
                        <div>
                            <strong>MaxValue</strong>
                        </div>
                        <div>
                            @currentPlcData.protA_L_I1 A
                        </div>
                    </div>
                    <div class="d-flex justify-content-around">
                        <div>
                            <strong>Load</strong>
                        </div>
                        <div class="col-2">
                            <TelerikProgressBar Max="@currentPlcData.protA_L_I1.Value" Value="@ProgressBarValue">
                                <ProgressBarLabel Visible="true" Position="@ProgressBarLabelPosition.Center">
                                    <Template>
                                        <div>
                                            @($"{(context.Value / currentPlcData.protA_L_I1.Value * 100):F2} %")
                                        </div>
                                    </Template>
                                </ProgressBarLabel>
                            </TelerikProgressBar>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row my-4">
            @*power*@
            <div class="col col-3-lg">
                <AbbEmaxGauge MinValue="0" MaxValue="500" GaugeValue="@currentPlcData.pActTotal.Value" PointerColor="Blue" Unit="kW" />
            </div>
            <div class="col col-3-lg">
                <AbbEmaxGauge MinValue="0" MaxValue="500" GaugeValue="@currentPlcData.pReactTotal.Value" PointerColor="Blue" Unit="kVAr" />
            </div>
            <div class="col col-3-lg">
                <AbbEmaxGauge MinValue="0" MaxValue="500" GaugeValue="@currentPlcData.pAppTotal.Value" PointerColor="Blue" Unit="kVA" />
            </div>
            <div class="col col-3-lg">
            </div>
        </div>
    }
    else
    {
        <div class="row my-4 justify-content-center">
            <div class="col-auto">
                <h4>No data yet!</h4>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? ItemId { get; set; }

    private Timer timer = new Timer();
    public ActualValuesDto currentPlcData;

    protected override void OnInitialized()
    {
        timer.Interval = 1000;
        timer.Elapsed += HandleTimer;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    public void Dispose()
    {
        timer.Dispose();
    }

    private async void HandleTimer(object sender, ElapsedEventArgs e)
    {
        await UpdateState();
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    await base.OnInitializedAsync();
    //    await UpdateState();
    //}

    private async Task UpdateState()
    {
        try
        {
            HttpClient httpClient = ClientFactory.CreateClient("WebApi");
            currentPlcData = await httpClient.GetFromJsonAsync<ActualValuesDto>($"api/plcdata/actual/{ItemId}");
        }
        catch (Exception ex)
        {
            string m = ex.Message;
        }
        StateHasChanged();
    }
}