@page "/chart"

@using Plotly.Blazor.Traces.ScatterLib
@using Title = Plotly.Blazor.LayoutLib.Title
@using YAxis = Plotly.Blazor.LayoutLib.YAxis

@inject IHttpClientFactory ClientFactory

<PlotlyChart @bind-Config="voltageChartConfig" @bind-Layout="voltageChartLayout" @bind-Data="voltageChartData" @ref="voltageChart" />
<TelerikButton OnClick="OnButtonClick">Update</TelerikButton>
<PlotlyChart @bind-Config="currentChartConfig" @bind-Layout="currentChartLayout" @bind-Data="currentChartData" @ref="currentChart" />

@if (actualEnergyColl is not null && reactiveEnergyColl is not null && apparentEnergyColl is not null)
{
    @*<TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.ScatterLine" Name="L1Voltage" Data="@voltageColl" XField="@nameof(VoltageDataModel.TimeStamp)" YField="@nameof(VoltageDataModel.L1Voltage)" />
            <ChartSeries Type="ChartSeriesType.ScatterLine" Name="L2Voltage" Data="@voltageColl" XField="@nameof(VoltageDataModel.TimeStamp)" YField="@nameof(VoltageDataModel.L2Voltage)" />
            <ChartSeries Type="ChartSeriesType.ScatterLine" Name="L3Voltage" Data="@voltageColl" XField="@nameof(VoltageDataModel.TimeStamp)" YField="@nameof(VoltageDataModel.L3Voltage)" />
        </ChartSeriesItems>

        <ChartXAxes>
            <ChartXAxis Type="date" BaseUnit="seconds">
                <ChartXAxisTitle Text="Time"></ChartXAxisTitle>
                <ChartXAxisLabels Format="{0:yyyy/MM/dd}"></ChartXAxisLabels>
            </ChartXAxis>
        </ChartXAxes>
    </TelerikChart>

    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.ScatterLine" Name="L1Current" Data="@currentColl" XField="@nameof(CurrentDataModel.TimeStamp)" YField="@nameof(CurrentDataModel.L1Current)" />
            <ChartSeries Type="ChartSeriesType.ScatterLine" Name="L2Current" Data="@currentColl" XField="@nameof(CurrentDataModel.TimeStamp)" YField="@nameof(CurrentDataModel.L2Current)" />
            <ChartSeries Type="ChartSeriesType.ScatterLine" Name="L3Current" Data="@currentColl" XField="@nameof(CurrentDataModel.TimeStamp)" YField="@nameof(CurrentDataModel.L3Current)" />
            <ChartSeries Type="ChartSeriesType.ScatterLine" Name="NCurrent" Data="@currentColl" XField="@nameof(CurrentDataModel.TimeStamp)" YField="@nameof(CurrentDataModel.NCurrent)" />
        </ChartSeriesItems>

        <ChartXAxes>
            <ChartXAxis Type="date" BaseUnit="seconds">
                <ChartXAxisTitle Text="Time"></ChartXAxisTitle>
                <ChartXAxisLabels Format="{0:yyyy/MM/dd}"></ChartXAxisLabels>
            </ChartXAxis>
        </ChartXAxes>

        <ChartTitle Text="Current Over Time" />
        <ChartLegend Position="Telerik.Blazor.ChartLegendPosition.Bottom" />
    </TelerikChart>*@

    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Column" Name="Actual Energy" Data="@actualEnergyColl"></ChartSeries>
        </ChartSeriesItems>

        <ChartCategoryAxes>
            <ChartCategoryAxis Categories="@xAxisItems"></ChartCategoryAxis>
        </ChartCategoryAxes>

        <ChartTitle Text="Actual Energy"></ChartTitle>

        <ChartLegend Position="Telerik.Blazor.ChartLegendPosition.Bottom">
        </ChartLegend>
    </TelerikChart>

    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Column" Name="Reactive Energy" Data="@reactiveEnergyColl"></ChartSeries>
        </ChartSeriesItems>

        <ChartCategoryAxes>
            <ChartCategoryAxis Categories="@xAxisItems"></ChartCategoryAxis>
        </ChartCategoryAxes>

        <ChartTitle Text="Reactive Energy"></ChartTitle>

        <ChartLegend Position="Telerik.Blazor.ChartLegendPosition.Bottom">
        </ChartLegend>
    </TelerikChart>

    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Column" Name="Apparent Energy" Data="@apparentEnergyColl"></ChartSeries>
        </ChartSeriesItems>

        <ChartCategoryAxes>
            <ChartCategoryAxis Categories="@xAxisItems"></ChartCategoryAxis>
        </ChartCategoryAxes>

        <ChartTitle Text="Apparent Energy"></ChartTitle>

        <ChartLegend Position="Telerik.Blazor.ChartLegendPosition.Bottom">
        </ChartLegend>
    </TelerikChart>
}
else
{
    <div class="container">
        <div class="row my-4 justify-content-center">
            <div class="col-auto">
                <h4>No data yet!</h4>
            </div>
        </div>
    </div>
}

@code {

    #region Voltage
    public class VoltageDataModel
    {
        public int? L1Voltage { get; set; }
        public int? L2Voltage { get; set; }
        public int? L3Voltage { get; set; }
        public DateTimeOffset TimeStamp { get; set; }
    }

    private PlotlyChart voltageChart;
    private Config voltageChartConfig = new()
    {
        Responsive = true
    };

    private IList<ITrace> voltageChartData = new List<ITrace>
    {
        new Scatter
        {
            Name = "ScatterTrace",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = new List<object>(),
            Y = new List<object>()
        }
    };

    private Layout voltageChartLayout = new()
    {
            Title = new Title { Text = "Voltage over time" },
            YAxis = new List<YAxis>
        {
            new()
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title { Text = "Volt" },
                RangeMode = Plotly.Blazor.LayoutLib.YAxisLib.RangeModeEnum.ToZero   //always show the 0 point of Y axis
            }
        }
    };
    #endregion

    #region Current
    public class CurrentDataModel
    {
        public int? L1Current { get; set; }
        public int? L2Current { get; set; }
        public int? L3Current { get; set; }
        public int? NCurrent { get; set; }
        public DateTimeOffset TimeStamp { get; set; }
    }

    private PlotlyChart currentChart;
    private Config currentChartConfig = new()
        {
            Responsive = true
        };

    private IList<ITrace> currentChartData = new List<ITrace>
    {
        new Scatter
        {
            Name = "ScatterTrace",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = new List<object>(),
            Y = new List<object>()
        }
    };

    private Layout currentChartLayout = new()
        {
            Title = new Title { Text = "Current over time" },
            YAxis = new List<YAxis>
        {
            new()
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title { Text = "Ampere" },
                RangeMode = Plotly.Blazor.LayoutLib.YAxisLib.RangeModeEnum.ToZero   //always show the 0 point of Y axis
            }
        }
        };
    #endregion

    private BlazorAbbPoc.Shared.ChartData? chartData = null;
    private IEnumerable<VoltageDataModel>? voltageColl;
    private IEnumerable<CurrentDataModel>? currentColl;
    private IEnumerable<object?>? actualEnergyColl;
    private IEnumerable<object?>? reactiveEnergyColl;
    private IEnumerable<object?>? apparentEnergyColl;
    private string[] xAxisItems = new[]{"L1", "L2", "L3", "Total"};
    private bool isRendered = false;
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();

        HttpClient httpClient = ClientFactory.CreateClient("WebApi");
        chartData = await httpClient.GetFromJsonAsync<BlazorAbbPoc.Shared.ChartData>("api/plcdata/chartdata/0.4.1");
        actualEnergyColl = new object?[] { chartData.AggregatedData?.l1ActE, chartData.AggregatedData?.l2ActE, chartData.AggregatedData?.l3ActE, chartData.AggregatedData?.totActE };
        reactiveEnergyColl = new object?[] { chartData.AggregatedData?.l1ReactE, chartData.AggregatedData?.l2ReactE, chartData.AggregatedData?.l3ReactE, chartData.AggregatedData?.totReactE };
        apparentEnergyColl = new object?[] { chartData.AggregatedData?.l1AppE, chartData.AggregatedData?.l2AppE, chartData.AggregatedData?.l3AppE, chartData.AggregatedData?.totAppE };
        if(isRendered)
        {
            Console.WriteLine("Draw from OnInitializedAsync");
            await Draw();
        }
        Console.WriteLine("Setting isInitialized to true");
        isInitialized = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if(isInitialized)
            {
                Console.WriteLine("Draw from OnAfterRenderAsync");
                await Draw();
            }
            Console.WriteLine("Setting isRendered to true");
            isRendered = true;
        }
    }

    private async Task Draw()
    {
        await voltageChart.AddTrace(new Scatter
            {
                Name = "L1 Voltage",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = chartData.TimeSeriesData.Select(x => (object)x.timestamp).ToList(),
                Y = chartData.TimeSeriesData.Select(x => (object)x.l1V).ToList()
            });
        await voltageChart.AddTrace(new Scatter
            {
                Name = "L2 Voltage",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = chartData.TimeSeriesData.Select(x => (object)x.timestamp).ToList(),
                Y = chartData.TimeSeriesData.Select(x => (object)x.l2V).ToList()
            });
        await voltageChart.AddTrace(new Scatter
            {
                Name = "L3 Voltage",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = chartData.TimeSeriesData.Select(x => (object)x.timestamp).ToList(),
                Y = chartData.TimeSeriesData.Select(x => (object)x.l3V).ToList()
            });

        await currentChart.AddTrace(new Scatter
            {
                Name = "L1 Current",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = chartData.TimeSeriesData.Select(x => (object)x.timestamp).ToList(),
                Y = chartData.TimeSeriesData.Select(x => (object)x.l1A).ToList()
            });
        await currentChart.AddTrace(new Scatter
            {
                Name = "L2 Current",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = chartData.TimeSeriesData.Select(x => (object)x.timestamp).ToList(),
                Y = chartData.TimeSeriesData.Select(x => (object)x.l2A).ToList()
            });
        await currentChart.AddTrace(new Scatter
            {
                Name = "L3 Current",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = chartData.TimeSeriesData.Select(x => (object)x.timestamp).ToList(),
                Y = chartData.TimeSeriesData.Select(x => (object)x.l3A).ToList()
            });
        await currentChart.AddTrace(new Scatter
            {
                Name = "N Current",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = chartData.TimeSeriesData.Select(x => (object)x.timestamp).ToList(),
                Y = chartData.TimeSeriesData.Select(x => (object)x.nA).ToList()
            });
    }

    private async Task OnButtonClick(MouseEventArgs args)
    {
        HttpClient httpClient = ClientFactory.CreateClient("WebApi");
        chartData = await httpClient.GetFromJsonAsync<BlazorAbbPoc.Shared.ChartData>($"api/plcdata/chartdata/0.4.1?fromDate={DateTime.Now.AddDays(-1):yyyy-MM-ddTHH:mm}&toDate={DateTime.Now:yyyy-MM-ddTHH:mm}");
    }
}