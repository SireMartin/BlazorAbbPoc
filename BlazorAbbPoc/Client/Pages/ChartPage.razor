@page "/chart"

@using Plotly.Blazor.Traces.ScatterLib
@using Title = Plotly.Blazor.LayoutLib.Title
@using YAxis = Plotly.Blazor.LayoutLib.YAxis

@inject IHttpClientFactory ClientFactory

<PlotlyChart @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" />

@if (voltageColl is not null)
{
    @*<TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.ScatterLine" Name="L1Voltage" Data="@voltageColl" XField="@nameof(VoltageDataModel.TimeStamp)" YField="@nameof(VoltageDataModel.L1Voltage)" />
            <ChartSeries Type="ChartSeriesType.ScatterLine" Name="L2Voltage" Data="@voltageColl" XField="@nameof(VoltageDataModel.TimeStamp)" YField="@nameof(VoltageDataModel.L2Voltage)" />
            <ChartSeries Type="ChartSeriesType.ScatterLine" Name="L3Voltage" Data="@voltageColl" XField="@nameof(VoltageDataModel.TimeStamp)" YField="@nameof(VoltageDataModel.L3Voltage)" />
        </ChartSeriesItems>

        <ChartXAxes>
            <ChartXAxis Type="date" BaseUnit="seconds">
                <ChartXAxisTitle Text="Time"></ChartXAxisTitle>
                <ChartXAxisLabels Format="{0:yyyy/MM/dd}"></ChartXAxisLabels>
            </ChartXAxis>
        </ChartXAxes>
    </TelerikChart>

    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.ScatterLine" Name="L1Current" Data="@currentColl" XField="@nameof(CurrentDataModel.TimeStamp)" YField="@nameof(CurrentDataModel.L1Current)" />
            <ChartSeries Type="ChartSeriesType.ScatterLine" Name="L2Current" Data="@currentColl" XField="@nameof(CurrentDataModel.TimeStamp)" YField="@nameof(CurrentDataModel.L2Current)" />
            <ChartSeries Type="ChartSeriesType.ScatterLine" Name="L3Current" Data="@currentColl" XField="@nameof(CurrentDataModel.TimeStamp)" YField="@nameof(CurrentDataModel.L3Current)" />
            <ChartSeries Type="ChartSeriesType.ScatterLine" Name="NCurrent" Data="@currentColl" XField="@nameof(CurrentDataModel.TimeStamp)" YField="@nameof(CurrentDataModel.NCurrent)" />
        </ChartSeriesItems>

        <ChartXAxes>
            <ChartXAxis Type="date" BaseUnit="seconds">
                <ChartXAxisTitle Text="Time"></ChartXAxisTitle>
                <ChartXAxisLabels Format="{0:yyyy/MM/dd}"></ChartXAxisLabels>
            </ChartXAxis>
        </ChartXAxes>

        <ChartTitle Text="Current Over Time" />
        <ChartLegend Position="Telerik.Blazor.ChartLegendPosition.Bottom" />
    </TelerikChart>

    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Column" Name="Actual Energy" Data="@actualEnergyColl"></ChartSeries>
        </ChartSeriesItems>

        <ChartCategoryAxes>
            <ChartCategoryAxis Categories="@xAxisItems"></ChartCategoryAxis>
        </ChartCategoryAxes>

        <ChartTitle Text="Actual Energy"></ChartTitle>

        <ChartLegend Position="Telerik.Blazor.ChartLegendPosition.Bottom">
        </ChartLegend>
    </TelerikChart>

    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Column" Name="Reactive Energy" Data="@reactiveEnergyColl"></ChartSeries>
        </ChartSeriesItems>

        <ChartCategoryAxes>
            <ChartCategoryAxis Categories="@xAxisItems"></ChartCategoryAxis>
        </ChartCategoryAxes>

        <ChartTitle Text="Reactive Energy"></ChartTitle>

        <ChartLegend Position="Telerik.Blazor.ChartLegendPosition.Bottom">
        </ChartLegend>
    </TelerikChart>

    <TelerikChart>
        <ChartSeriesItems>
            <ChartSeries Type="ChartSeriesType.Column" Name="Apparent Energy" Data="@apparentEnergyColl"></ChartSeries>
        </ChartSeriesItems>

        <ChartCategoryAxes>
            <ChartCategoryAxis Categories="@xAxisItems"></ChartCategoryAxis>
        </ChartCategoryAxes>

        <ChartTitle Text="Apparent Energy"></ChartTitle>

        <ChartLegend Position="Telerik.Blazor.ChartLegendPosition.Bottom">
        </ChartLegend>
    </TelerikChart>*@
}
else
{
    <div class="container">
        <div class="row my-4 justify-content-center">
            <div class="col-auto">
                <h4>No data yet!</h4>
            </div>
        </div>
    </div>
}

@code {
    public class VoltageDataModel
    {
        public int? L1Voltage { get; set; }
        public int? L2Voltage { get; set; }
        public int? L3Voltage { get; set; }
        public DateTime TimeStamp { get; set; }
    }

    public class CurrentDataModel
    {
        public int? L1Current { get; set; }
        public int? L2Current { get; set; }
        public int? L3Current { get; set; }
        public int? NCurrent { get; set; }
        public DateTime TimeStamp { get; set; }
    }

    //plotly
    private PlotlyChart chart;
    private Config config = new()
    {
        Responsive = true
    };

    private IList<ITrace> data = new List<ITrace>
    {
        new Scatter
        {
            Name = "ScatterTrace",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = new List<object>(),
            Y = new List<object>()
        }
    };

    private Layout layout = new()
    {
            Title = new Title { Text = "Scatter" },
            YAxis = new List<YAxis>
        {
            new()
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title { Text = "Scatter Unit" }
            }
        }
    };

    private BlazorAbbPoc.Shared.ChartData? chartData = null;
    private IEnumerable<VoltageDataModel>? voltageColl;
    private IEnumerable<CurrentDataModel>? currentColl;
    private IEnumerable<object?>? actualEnergyColl;
    private IEnumerable<object?>? reactiveEnergyColl;
    private IEnumerable<object?>? apparentEnergyColl;
    private string[] xAxisItems = new[]{"L1", "L2", "L3", "Total"};

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            HttpClient httpClient = ClientFactory.CreateClient("WebApi");
            chartData = await httpClient.GetFromJsonAsync<BlazorAbbPoc.Shared.ChartData>("api/plcdata/chartdata/0.4.1");
            //voltageColl = chartData.TimeSeriesData.Select(x => new VoltageDataModel { TimeStamp = x.timestamp, L1Voltage = x.l1V, L2Voltage = x.l2V, L3Voltage = x.l3V });
            await chart.AddTrace(new Scatter
                {
                    Name = "L1 Voltage",
                    Mode = ModeFlag.Lines | ModeFlag.Markers,
                    X = chartData.TimeSeriesData.OrderBy(x => x.timestamp).Select(x => (object)x.timestamp).ToList(),
                    Y = chartData.TimeSeriesData.OrderBy(x => x.timestamp).Select(x => (object)x.l1V).ToList()
                });
            await chart.AddTrace(new Scatter
                {
                    Name = "L2 Voltage",
                    Mode = ModeFlag.Lines | ModeFlag.Markers,
                    X = chartData.TimeSeriesData.OrderBy(x => x.timestamp).Select(x => (object)x.timestamp).ToList(),
                    Y = chartData.TimeSeriesData.OrderBy(x => x.timestamp).Select(x => (object)x.l2V).ToList()
                });
            await chart.AddTrace(new Scatter
                {
                    Name = "L3 Voltage",
                    Mode = ModeFlag.Lines | ModeFlag.Markers,
                    X = chartData.TimeSeriesData.OrderBy(x => x.timestamp).Select(x => (object)x.timestamp).ToList(),
                    Y = chartData.TimeSeriesData.OrderBy(x => x.timestamp).Select(x => (object)x.l3V).ToList()
                });
            currentColl = chartData.TimeSeriesData.Select(x => new CurrentDataModel { TimeStamp = x.timestamp, L1Current = x.l1V, L2Current = x.l2V, L3Current = x.l3V, NCurrent = x.nA });
            actualEnergyColl = new object?[] { chartData.AggregatedData?.l1ActE, chartData.AggregatedData?.l2ActE, chartData.AggregatedData?.l3ActE, chartData.AggregatedData?.totActE };
            reactiveEnergyColl = new object?[] { chartData.AggregatedData?.l1ReactE, chartData.AggregatedData?.l2ReactE, chartData.AggregatedData?.l3ReactE, chartData.AggregatedData?.totReactE };
            apparentEnergyColl = new object?[] { chartData.AggregatedData?.l1AppE, chartData.AggregatedData?.l2AppE, chartData.AggregatedData?.l3AppE, chartData.AggregatedData?.totAppE };
        }
    }
}