@page "/plcdata"

@using System.Timers;
@using BlazorAbbPoc.Shared.Plc;

@inject IHttpClientFactory ClientFactory

<PageTitle>PlcData</PageTitle>

<h1>PlcData</h1>

<p role="status">Last mqtt data:</p>
@if(@currentPlcData is not null)
{
    <p>Temp     : @currentPlcData.l1nV</p>
    <p>Temp     : @currentPlcData.l2nV</p>
    <p>Temp     : @currentPlcData.l3nV</p>
    <p>Pressure : @currentPlcData.l1A</p>
    <p>Pressure : @currentPlcData.l2A</p>
    <p>Pressure : @currentPlcData.l3A</p>
    <p>Temp     : @currentPlcData.l1l2V</p>
    <p>Temp     : @currentPlcData.l2l3V</p>
    <p>Temp     : @currentPlcData.l3l1V</p>
    <p>Act      : @currentPlcData.pActTotal</p>
    <p>Act      : @currentPlcData.pReactTotal</p>
    <p>Act      : @currentPlcData.pAppTotal</p>
}


@code {
    private Timer timer = new Timer();
    public AbbPlcMsg currentPlcData;

    protected override void OnInitialized()
    {
        timer.Interval = 500;
        timer.Elapsed += HandleTimer;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private async void HandleTimer(object sender, ElapsedEventArgs e)
    {
        await UpdateState();
    }

    private async Task UpdateState()
    {
        try
        {
            HttpClient httpClient = ClientFactory.CreateClient("WebApi");
            currentPlcData = await httpClient.GetFromJsonAsync<AbbPlcMsg>("api/plcdata");
        }
        catch (Exception ex)
        {
            string m = ex.Message;
        }
        StateHasChanged();
    }
}
