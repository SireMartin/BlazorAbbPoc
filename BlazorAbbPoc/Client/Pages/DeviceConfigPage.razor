@page "/Configuration/Device"

@using Telerik.DataSource;
@using BlazorAbbPoc.Shared.Messages

@inject IHttpClientFactory ClientFactory

<TelerikBreadcrumb Data="@(new Shared.BreadCrumbItem[] {new BreadCrumbItem {Text = "Configuration", Url= "Configuration"}, new BreadCrumbItem {Text = "Device", Url= "Configuration/Device"}})" />

@if(DeviceTypes is not null && Devices is not null && Cabinets is not null && CabinetGroups is not null && CabinetsWithCabinetGroupName is not null)
{

<TelerikGrid Data=@Devices
             OnUpdate="@UpdateHandler"
             OnDelete="@DeleteHandler"
             OnCreate="@CreateHandler"
             ConfirmDelete="true"
             Pageable="true"
             Groupable="true"
             Sortable="true"
             FilterMode="GridFilterMode.FilterMenu"
             Resizable="true"
             Reorderable="true"
             EditMode="GridEditMode.Popup"
             SelectionMode="GridSelectionMode.Multiple"
             OnStateInit="@((GridStateEventArgs<DeviceDto> args) => OnStateInit(args))"
             PageSize="10"
             Navigable="true">
    <GridColumns>
        <GridCheckboxColumn></GridCheckboxColumn>
        <GridColumn Field="@nameof(DeviceDto.DeviceId)" Title="Device Id" Width="195px" />
        <GridColumn Field="@nameof(DeviceDto.Name)" Title="Name" Width="195px" />

        <GridColumn Field="@nameof(DeviceDto.DeviceTypeId)" Title="DeviceType" Width="140px">
            <Template>
                @{
                    var device = context as DeviceDto;
                    var categoryName = DeviceTypes.FirstOrDefault(c => c.Id == device.DeviceTypeId)?.Name;
                    @categoryName
                    ;
                }
            </Template>
            <EditorTemplate>
                @{
                    var device = context as DeviceDto;
                    <TelerikDropDownList Data="@DeviceTypes"
                                         @bind-Value="@device.DeviceTypeId"
                                     DefaultText="Choose DeviceType"
                                     TextField="Name"
                                     ValueField="Id">
                    </TelerikDropDownList>
                }
            </EditorTemplate>
            <FilterMenuTemplate>
                @{
                    <div class="filter-values-container">
                        @foreach (var deviceType in DeviceTypes)
                        {
                            <div>
                                <TelerikCheckBox Value="@(GetFilterValues(context.FilterDescriptor).Contains(deviceType.Id))"
                                         ValueChanged="@((bool value) => ColumnValueChanged(value, deviceType.Id, context.FilterDescriptor))"
                                         Id="@($"name_{deviceType.Id}")">
                                </TelerikCheckBox>
                                <label for="@($"name_{deviceType.Id}")">
                                    @deviceType.Name
                                </label>
                            </div>
                        }
                    </div>
                }
            </FilterMenuTemplate>
            <GroupHeaderTemplate>
                @{
                    if (context.Value != null)
                    {
                        <span>DeviceType: @DeviceTypes.FirstOrDefault(c => c.Id == (int)context.Value).Name</span>
                    }
                    else
                    {
                        <span>No DeviceType</span>
                    }
                }
            </GroupHeaderTemplate>
        </GridColumn>

        <GridColumn Field="@nameof(DeviceDto.CabinetId)" Title="Cabinet" Width="140px">
            <Template>
                @{
                    var device = context as DeviceDto;
                    var categoryName = Cabinets.FirstOrDefault(c => c.Id == device.CabinetId)?.Name;
                    @categoryName
                    ;
                }
            </Template>
            <EditorTemplate>
                @{
                    var device = context as DeviceDto;
                        <TelerikDropDownList Data="@CabinetsWithCabinetGroupName"
                                        @bind-Value="@device.CabinetId"
                                    DefaultText="Choose Cabinet"
                                    TextField="Name"
                                    ValueField="Id">
                    </TelerikDropDownList>
                }
            </EditorTemplate>
            <FilterMenuTemplate>
                @{
                    <div class="filter-values-container">
                        @foreach (var cabinet in Cabinets)
                        {
                            <div>
                                <TelerikCheckBox Value="@(GetFilterValues(context.FilterDescriptor).Contains(cabinet.Id))"
                                        ValueChanged="@((bool value) => ColumnValueChanged(value, cabinet.Id, context.FilterDescriptor))"
                                        Id="@($"name_{cabinet.Id}")">
                                </TelerikCheckBox>
                                <label for="@($"name_{cabinet.Id}")">
                                    @cabinet.Name
                                </label>
                            </div>
                        }
                    </div>
                }
            </FilterMenuTemplate>
            <GroupHeaderTemplate>
                @{
                    if (context.Value != null)
                    {
                        <span>Cabinet: @Cabinets.FirstOrDefault(c => c.Id == (int)context.Value).Name</span>
                    }
                    else
                    {
                        <span>No Cabinet</span>
                    }
                }
            </GroupHeaderTemplate>
        </GridColumn>

        <GridColumn Field="@nameof(DeviceDto.CabinetGroupId)" Title="CabinetGroup" Editable="false" Width="140px">
            <Template>
                @{
                    var device = context as DeviceDto;
                    var categoryName = CabinetGroups.FirstOrDefault(c => c.Id == device.CabinetGroupId)?.Name;
                    @categoryName
                    ;
                }
            </Template>
            <FilterMenuTemplate>
                @{
                    <div class="filter-values-container">
                        @foreach (var cabinetGroup in CabinetGroups)
                        {
                            <div>
                                <TelerikCheckBox Value="@(GetFilterValues(context.FilterDescriptor).Contains(cabinetGroup.Id))"
                                        ValueChanged="@((bool value) => ColumnValueChanged(value, cabinetGroup.Id, context.FilterDescriptor))"
                                        Id="@($"name_{cabinetGroup.Id}")">
                                </TelerikCheckBox>
                                <label for="@($"name_{cabinetGroup.Id}")">
                                    @cabinetGroup.Name
                                </label>
                            </div>
                        }
                    </div>
                }
            </FilterMenuTemplate>
            <GroupHeaderTemplate>
                @{
                    if (context.Value != null)
                    {
                        <span>CabinetGroup: @CabinetGroups.FirstOrDefault(c => c.Id == (int)context.Value).Name</span>
                    }
                    else
                    {
                        <span>No CabinetGroup</span>
                    }
                }
            </GroupHeaderTemplate>
        </GridColumn>

        <GridColumn Field="@nameof(DeviceDto.MaxValue)" Title="Max Value" Width="200px" />
        <GridColumn Field="@nameof(DeviceDto.CabinetPosition)" Title="Cabinet Position" Width="200px" />
        <GridCommandColumn Width="190px">
            <GridCommandButton Command="Edit" Icon="edit" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Edit</GridCommandButton>
            <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
    <GridToolBar>
        <GridCommandButton Command="Add" Icon="add">Add Device</GridCommandButton>
    </GridToolBar>
    </TelerikGrid>
}
else
{
    <text>Data is loading ...</text>
}

@code {
    private IEnumerable<DeviceDto>? Devices { get; set; }
    private IEnumerable<DeviceTypeDto>? DeviceTypes { get; set; }
    private IEnumerable<CabinetDto>? Cabinets { get; set; }
    private IEnumerable<CabinetGroupDto>? CabinetGroups { get; set; }
    //cacluated field on the join of Cabinets and CabinetGroups
    private IEnumerable<CabinetDto>? CabinetsWithCabinetGroupName { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        //HttpClient httpClient = ClientFactory.CreateClient("WebApi");
        HttpClient httpClient = ClientFactory.CreateClient("SecureApiClient");
        Devices = await httpClient.GetFromJsonAsync<IEnumerable<DeviceDto>>("api/Config/devices");
        DeviceTypes = await httpClient.GetFromJsonAsync<IEnumerable<DeviceTypeDto>>("api/Config/devicetypes");
        Cabinets = await httpClient.GetFromJsonAsync<IEnumerable<CabinetDto>>("api/Config/cabinets");
        CabinetGroups = await httpClient.GetFromJsonAsync<IEnumerable<CabinetGroupDto>>("api/Config/cabinetgroups");
        CabinetsWithCabinetGroupName = Cabinets.Join(CabinetGroups, c => c.CabinetGroupId, cg => cg.Id, (c, cg) => new CabinetDto { Id = c.Id, Name = $"{c.Name} ({cg.Name})" });
    }

    private void OnStateInit(GridStateEventArgs<DeviceDto> args)
    {
        args.GridState.GroupDescriptors = new List<GroupDescriptor>()
        {
            new GroupDescriptor()
            {
                Member = nameof(DeviceDto.DeviceTypeId),
                MemberType = typeof(int)
            }
        };
    }

    public async Task UpdateHandler(GridCommandEventArgs args)
    {
        var device = (DeviceDto)args.Item;
        HttpClient httpClient = ClientFactory.CreateClient("WebApi");
        HttpResponseMessage respMsg = await httpClient.PutAsJsonAsync("api/Config/device", device);
        await LoadData();
        StateHasChanged();
    }

    public async Task DeleteHandler(GridCommandEventArgs args)
    {
        var device = (DeviceDto)args.Item;
        HttpClient httpClient = ClientFactory.CreateClient("WebApi");
        HttpResponseMessage respMsg = await httpClient.DeleteAsync($"api/Config/device/{device.Id}");
        await LoadData();
        StateHasChanged();
    }

    public async Task CreateHandler(GridCommandEventArgs args)
    {
        var device = (DeviceDto)args.Item;
        HttpClient httpClient = ClientFactory.CreateClient("WebApi");
        HttpResponseMessage respMsg = await httpClient.PostAsJsonAsync("api/Config/device", device);
        await LoadData();
        StateHasChanged();
    }

    public List<int?> GetFilterValues(CompositeFilterDescriptor filterDescriptor)
    {
        return filterDescriptor.FilterDescriptors.Select(f => (int?)(f as FilterDescriptor).Value).ToList();
    }

    public void ColumnValueChanged(bool value, int deviceTypeId, CompositeFilterDescriptor filterDescriptor)
    {
        var filter = filterDescriptor.FilterDescriptors.FirstOrDefault(f => deviceTypeId.Equals((f as FilterDescriptor).Value));

        filterDescriptor.LogicalOperator = FilterCompositionLogicalOperator.Or;

        if (value && filter == null)
        {
            filterDescriptor.FilterDescriptors.Add(new FilterDescriptor(nameof(DeviceDto.DeviceTypeId), FilterOperator.IsEqualTo, deviceTypeId));
        }
        else if (!value && filter != null)
        {
            filterDescriptor.FilterDescriptors.Remove(filter);
        }
    }
}

<style>
    .width-100 {
        width: 100%;
    }
</style>