@page "/grid"

@using Telerik.DataSource;
@using BlazorAbbPoc.Shared.Messages

@inject IHttpClientFactory ClientFactory

@if(DeviceTypes is not null && Devices is not null)
{

<TelerikGrid Data=@Devices
             OnUpdate="@UpdateHandler"
             OnDelete="@DeleteHandler"
             OnCreate="@CreateHandler"
             ConfirmDelete="true"
             Pageable="true"
             Groupable="true"
             Sortable="true"
             FilterMode="GridFilterMode.FilterMenu"
             Resizable="true"
             Reorderable="true"
             EditMode="GridEditMode.Popup"
             SelectionMode="GridSelectionMode.Multiple"
             OnStateInit="@((GridStateEventArgs<Device> args) => OnStateInit(args))"
             PageSize="10"
             Navigable="true">
    <GridColumns>
        <GridCheckboxColumn></GridCheckboxColumn>
        <GridColumn Field="@nameof(Device.DeviceId)" Title="Device Id" Width="195px" />
        @*<GridColumn Field="@nameof(ProductDto.UnitPrice)" Width="120px" Title="Cost" TextAlign="@ColumnTextAlign.Right">
            <Template>
                @((context as ProductDto).UnitPrice.GetValueOrDefault().ToString("C2"))
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(ProductDto.Discontinued)" Width="135px" Title="Discontinued" Editable="false" TextAlign="@ColumnTextAlign.Center">
            <Template>
                @{
                    var product = context as ProductDto;

                    if (product.Discontinued.GetValueOrDefault())
                    {
                        <span class="k-badge k-badge-md k-badge-solid k-badge-solid-error k-rounded-md">Discontinued</span>
                    }
                    else
                    {
                        <span class="k-badge k-badge-md k-badge-solid k-badge-solid-success k-rounded-md">Available</span>
                    }
                }
            </Template>
        </GridColumn>*@
        <GridColumn Field="@nameof(Device.DeviceTypeId)" Title="DeviceType" Width="140px">
            <Template>
                @{
                    var device = context as Device;
                    var categoryName = DeviceTypes.FirstOrDefault(c => c.Id == device.DeviceTypeId)?.Name;
                    @categoryName
                    ;
                }
            </Template>
            <EditorTemplate>
                @{
                    var device = context as Device;
                    <TelerikDropDownList Data="@DeviceTypes"
                                         @bind-Value="@device.DeviceTypeId"
                                     DefaultText="Choose DeviceType"
                                     TextField="Name"
                                     ValueField="Id">
                    </TelerikDropDownList>
                }
            </EditorTemplate>
            <FilterMenuTemplate>
                @{
                    <div class="filter-values-container">
                        @foreach (var deviceType in DeviceTypes)
                        {
                            <div>
                                <TelerikCheckBox Value="@(GetFilterValues(context.FilterDescriptor).Contains(deviceType.Id))"
                                         ValueChanged="@((bool value) => ColumnValueChanged(value, deviceType.Id, context.FilterDescriptor))"
                                         Id="@($"name_{deviceType.Id}")">
                                </TelerikCheckBox>
                                <label for="@($"name_{deviceType.Id}")">
                                    @deviceType.Name
                                </label>
                            </div>
                        }
                    </div>
                }
            </FilterMenuTemplate>
            <GroupHeaderTemplate>
                @{
                    if (context.Value != null)
                    {
                        <span>Category: @DeviceTypes.FirstOrDefault(c => c.Id == (int)context.Value).Name</span>
                    }
                    else
                    {
                        <span>No Category</span>
                    }
                }
            </GroupHeaderTemplate>
        </GridColumn>
        @*<GridColumn Field="@nameof(ProductDto.UnitsInStock)" Title="In Stock" Width="170px">
            <Template>
                @{
                    var product = context as ProductDto;
                    var value = product.UnitsInStock.GetValueOrDefault();
                }
                <TelerikProgressBar Class="width-100" Max="125" Value="(double)value">
                    <ProgressBarLabel Visible="true" Position="@ProgressBarLabelPosition.Center">
                        <Template Context="progressBarContext">
                            @if (value > 125)
                            {
                                <span style="font-weight:bold">Over 125 in stock</span>
                            }
                            else
                            {
                                <span>In stock:<span style="font-weight:bold">@(progressBarContext.Value)</span></span>
                            }
                        </Template>
                    </ProgressBarLabel>
                </TelerikProgressBar>
            </Template>
        </GridColumn>*@
        <GridColumn Field="@nameof(Device.MaxValue)" Title="Max Value" Width="200px" />
        <GridColumn Field="@nameof(Device.CabinetPosition)" Title="Cabinet Position" Width="200px" />
        <GridCommandColumn Width="190px">
            <GridCommandButton Command="Edit" Icon="edit" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Edit</GridCommandButton>
            <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
    <GridToolBar>
        <GridCommandButton Command="Add" Icon="add">Add Product</GridCommandButton>
    </GridToolBar>
    </TelerikGrid>
}
else
{
    <text>Data is loading ...</text>
}

@code {
    public IEnumerable<Device>? Devices { get; set; }
    public IEnumerable<DeviceType>? DeviceTypes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        HttpClient httpClient = ClientFactory.CreateClient("WebApi");
        Devices = await httpClient.GetFromJsonAsync<IEnumerable<Device>>("api/Device/devices");
        DeviceTypes = await httpClient.GetFromJsonAsync<IEnumerable<DeviceType>>("api/Device/devicetypes");
    }

    private void OnStateInit(GridStateEventArgs<Device> args)
    {
        args.GridState.GroupDescriptors = new List<GroupDescriptor>()
        {
            new GroupDescriptor()
            {
                Member = nameof(Device.DeviceTypeId),
                MemberType = typeof(int)
            }
        };
    }

    public async Task UpdateHandler(GridCommandEventArgs args)
    {
        var device = (Device)args.Item;
        HttpClient httpClient = ClientFactory.CreateClient("WebApi");
        HttpResponseMessage respMsg = await httpClient.PutAsJsonAsync("api/Device/device", device);
        await LoadData();
        StateHasChanged();
    }

    public async Task DeleteHandler(GridCommandEventArgs args)
    {
        var device = (Device)args.Item;
        HttpClient httpClient = ClientFactory.CreateClient("WebApi");
        HttpResponseMessage respMsg = await httpClient.DeleteAsync($"api/Device/device/{device.Id}");
        await LoadData();
        StateHasChanged();
    }

    public async Task CreateHandler(GridCommandEventArgs args)
    {
        var device = (Device)args.Item;
        HttpClient httpClient = ClientFactory.CreateClient("WebApi");
        HttpResponseMessage respMsg = await httpClient.PostAsJsonAsync("api/Device/device", device);
        await LoadData();
        StateHasChanged();
    }

    public List<int?> GetFilterValues(CompositeFilterDescriptor filterDescriptor)
    {
        return filterDescriptor.FilterDescriptors.Select(f => (int?)(f as FilterDescriptor).Value).ToList();
    }

    public void ColumnValueChanged(bool value, int deviceTypeId, CompositeFilterDescriptor filterDescriptor)
    {
        var filter = filterDescriptor.FilterDescriptors.FirstOrDefault(f => deviceTypeId.Equals((f as FilterDescriptor).Value));

        filterDescriptor.LogicalOperator = FilterCompositionLogicalOperator.Or;

        if (value && filter == null)
        {
            filterDescriptor.FilterDescriptors.Add(new FilterDescriptor(nameof(Device.DeviceTypeId), FilterOperator.IsEqualTo, deviceTypeId));
        }
        else if (!value && filter != null)
        {
            filterDescriptor.FilterDescriptors.Remove(filter);
        }
    }
}

<style>
    .width-100 {
        width: 100%;
    }
</style>